service: react-and-serverless-nest-template # <change> this to yours
org: andriibesttoporgintheworld # <change> this to yours

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1
  tags:
    app: nest-lambda-project # tag for AWS billing
  environment: # each env variable from .env.[stage] must be present here also with value like ${env:VAR_NAME_FROM_DOTENV}
    NODE_ENV: ${sls:stage}
    VAR_FROM_SERVERLESS_YAML: your_value # sample that you can set values directly from serverless.yml (without .env)
    VAR_DEPENDING_ON_ENVIRONMENT: ${param:some_var} # you can also set variables depending on environment directly from this file
    TEST_VALUE: ${env:TEST_VALUE} # this is the way you should set all variables from .env.[stage]
    FRONTEND_URL: ${env:FRONTEND_URL}
    AWS_APP_REGION: ${aws:region} # the name contains APP because AWS_REGION is reserved
    AWS_DYNAMODB_TABLE: ${self:service}-table # name of DynamoDB table will be the [name of our service]-table
    AWS_DYNAMODB_BATCH_SIZE: ${env:AWS_DYNAMODB_BATCH_SIZE}
    AWS_S3_BUCKET: ${self:service}-bucket # name of S3 Bucket table will be the [name of our service]-bucket
    AWS_S3_SIGNED_URL_TTL: ${env:AWS_S3_SIGNED_URL_TTL}
    AWS_SES_EMAIL_FROM: ${env:AWS_SES_EMAIL_FROM}
  httpApi: # CORS settings
    metrics: false
    useProviderTags: true
    cors:
      allowedOrigins:
        - ${env:FRONTEND_URL}
      allowedHeaders: # we can't use "*" as value, because we are using credentials (http only cookies)
        - Content-Type
        - Authorization
        - Accept
        - X-Requested-With
        - Origin
        - Referer
        - Cache-Control
        - rid
        - fdi-version
        - anti-csrf
        - st-auth-mode
      allowedMethods:
        - '*'
      allowCredentials: true
      exposedResponseHeaders:
        - '*'
      maxAge: 6000 # In seconds
  iam: # role for lambda that gives access to DynamoDB, S3
    role:
      name: ${self:service}-lambda-role
      statements:
        - Effect: 'Allow'
          Action: '*'
          Resource:
            - 'arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-table'
            - 'arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-table/index/*' # because indexes are treated as other tables
        - Effect: 'Allow'
          Action: '*'
          Resource:
            - 'arn:aws:s3:::${self:service}-bucket' # this is for bucket itself
            - 'arn:aws:s3:::${self:service}-bucket/*' # this is for bucket data
#        - "Effect": 'Allow' # uncomment when you are tired of finding required action names, resources etc :)
#          "Action": "*",
#          "Resource": "*"

# by default stages are called prod and dev, the line below changes them to production and development
stages:
  development:
    params:
      some_var: 1000
  production:
    params:
      some_var: 30

package:
  exclude:
    - node_modules/**

functions:
  main:
    handler: dist/main.handler
    events:
      - httpApi: "*"

resources:
  Resources:
    ApplicationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-table
        AttributeDefinitions:
          - AttributeName: ENTITY_TYPE
            AttributeType: S
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ENTITY_TYPE-index
            KeySchema:
              - AttributeName: ENTITY_TYPE
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: SK-index
            KeySchema:
              - AttributeName: SK
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        SSESpecification:
          SSEEnabled: false
        TableClass: STANDARD
        DeletionProtectionEnabled: true
    ApplicationBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:service}-bucket
